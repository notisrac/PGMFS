/**
	PGMFS (Program Memory FileSystem) example sketch

	PGMFS is an Arduino library for handling files stored in the program space as they were in a filesystem.
	This example for the PGMFS library demonstrates how to:
	 - instantiate a new PGMFS instance
	 - add files to it
	 - search for files
	 - copy files into arrays

	@author noti (https://github.com/notisrac)
	@version 1.1 03/01/16

	https://github.com/notisrac/PGMFS
*/

#include <PGMFS.h>


// test file (one paragraph of lorem ipsum) Created with https://github.com/notisrac/FileToCArray
extern const char fileTest[] PROGMEM;
const char fileTest[] = {
	0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f,
	0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69,
	0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x56, 0x69, 0x76, 0x61, 0x6d, 0x75, 0x73,
	0x20, 0x76, 0x65, 0x6e, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x73, 0x2c, 0x20, 0x61, 0x75, 0x67, 0x75,
	0x65, 0x20, 0x73, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x2c, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x73, 0x61,
	0x70, 0x69, 0x65, 0x6e, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x20, 0x65, 0x73, 0x74,
	0x2c, 0x20, 0x65, 0x75, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x61,
	0x6e, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x61, 0x20, 0x61, 0x63, 0x20, 0x6e, 0x65, 0x71,
	0x75, 0x65, 0x2e, 0x20, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x6e,
	0x69, 0x6d, 0x20, 0x6d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63,
	0x20, 0x61, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x20, 0x6d, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x2c, 0x20,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x73, 0x61, 0x70, 0x69, 0x65, 0x6e,
	0x20, 0x65, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x74,
	0x2e, 0x20, 0x41, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x20,
	0x6f, 0x72, 0x63, 0x69, 0x20, 0x6e, 0x69, 0x73, 0x6c, 0x2e, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x74, 0x6f, 0x72, 0x74,
	0x6f, 0x72, 0x20, 0x75, 0x74, 0x20, 0x75, 0x72, 0x6e, 0x61, 0x20, 0x66, 0x69, 0x6e, 0x69, 0x62,
	0x75, 0x73, 0x20, 0x62, 0x69, 0x62, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x2e, 0x20, 0x44, 0x6f, 0x6e,
	0x65, 0x63, 0x20, 0x6e, 0x69, 0x73, 0x6c, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x72,
	0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x73, 0x20, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x20, 0x61, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x64,
	0x75, 0x6d, 0x20, 0x75, 0x74, 0x20, 0x6c, 0x61, 0x63, 0x75, 0x73, 0x2e, 0x20, 0x43, 0x75, 0x72,
	0x61, 0x62, 0x69, 0x74, 0x75, 0x72, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x20, 0x6f,
	0x72, 0x63, 0x69, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x20, 0x6d, 0x69, 0x20, 0x65, 0x74, 0x20, 0x72, 0x68, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x20, 0x68,
	0x65, 0x6e, 0x64, 0x72, 0x65, 0x72, 0x69, 0x74, 0x2e, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x20, 0x61, 0x63, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20,
	0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x69, 0x73, 0x71,
	0x75, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x74, 0x2e, 0x20, 0x55, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x72, 0x6e, 0x61,
	0x2e, 0x20, 0x46, 0x75, 0x73, 0x63, 0x65, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d, 0x65, 0x74,
	0x20, 0x76, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6c, 0x75, 0x6d, 0x20, 0x6c, 0x69, 0x62, 0x65,
	0x72, 0x6f, 0x2e, 0x20, 0x4d, 0x61, 0x75, 0x72, 0x69, 0x73, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20,
	0x74, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20, 0x53,
	0x65, 0x64, 0x20, 0x66, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6c, 0x6c, 0x61, 0x20, 0x74, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x69, 0x73, 0x2e,
	0x20, 0x41, 0x6c, 0x69, 0x71, 0x75, 0x61, 0x6d, 0x20, 0x6c, 0x6f, 0x62, 0x6f, 0x72, 0x74, 0x69,
	0x73, 0x20, 0x66, 0x65, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20,
	0x76, 0x65, 0x6c, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x71, 0x75, 0x65,
	0x2e, 0x20, 0x4d, 0x61, 0x65, 0x63, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x76, 0x75, 0x6c, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x20, 0x65, 0x72, 0x61, 0x74, 0x20, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x71, 0x75, 0x65, 0x2c, 0x20, 0x70, 0x75, 0x6c, 0x76, 0x69, 0x6e, 0x61, 0x72, 0x20, 0x73, 0x65,
	0x6d, 0x20, 0x6e, 0x65, 0x63, 0x2c, 0x20, 0x75, 0x6c, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x74, 0x75, 0x72, 0x70, 0x69, 0x73, 0x2e
};

// number of files to store in the fs
#define FileListSize 3
// init the fs
PGMFS PROGMEMFileSystem(FileListSize);

// copy buffer size
#define TargetBufferSize 100
byte targetBuffer[TargetBufferSize];

void setup()
{
    Serial.begin(115200);
    Serial.println("\nPGMS example");

	// add files to the fs (filename, size, [type], [isCompressed])
	PROGMEMFileSystem.addFile("testFile1.foo", 727, fileTest, FileType::TXT);
	PROGMEMFileSystem.addFile("testFile2.foo", 727, fileTest, FileType::GIF, false);
	PROGMEMFileSystem.addFile("testFile3.foo", 727, fileTest);
}

void loop()
{
	// find the file by its name. it will return a file object
    PGMFile * requestedFile = PROGMEMFileSystem.findFile("testFile2.foo");
    Serial.print("fileName: ");
    Serial.println(requestedFile->fileName);
    Serial.print("size: ");
    Serial.println(requestedFile->size);
    Serial.print("type: ");
    Serial.println(requestedFile->type);
    Serial.print("location: 0x");
    Serial.println((unsigned int)&requestedFile->location, HEX);

    // start copying the file into the target buffer one chunk at a time
    bool done = false;
    unsigned int startPos = 0;
    unsigned int chunkSize = TargetBufferSize;
    while(!done)
    {
        Serial.print("copy: ");
        Serial.print(startPos);
        Serial.print(", ");
        Serial.print(chunkSize);
        Serial.print(", ");
		// copy the next bunch of bytes into the target array
        unsigned int bytesCopied = PROGMEMFileSystem.copyFile(requestedFile, targetBuffer, startPos, chunkSize);
		// print the current content of the target array
        //for(int i = 0; i < TargetBufferSize; i++)
        //{
        //    Serial.print((char)targetBuffer[i]);
        //    Serial.print(",");
        //}
        //Serial.println("");
        startPos = startPos + bytesCopied;
		Serial.println(bytesCopied);
		if(bytesCopied < chunkSize)
        { // done
			Serial.println("Done copying.");
			done = true;
        }
        else
        { // more bytes to serve
			Serial.print("Next part starts at: ");
			Serial.print(startPos);
			Serial.println("");
		}
    }
	Serial.println("");
	Serial.println("bye!");

	for(;;)
	{}
}

/*
 Output:

	PGMS example
	fileName: testFile2.foo
	size: 727
	type: 4
	location: 0x376
	copy: 0, 100, 100
	Next part starts at: 100
	copy: 100, 100, 100
	Next part starts at: 200
	copy: 200, 100, 100
	Next part starts at: 300
	copy: 300, 100, 100
	Next part starts at: 400
	copy: 400, 100, 100
	Next part starts at: 500
	copy: 500, 100, 100
	Next part starts at: 600
	copy: 600, 100, 100
	Next part starts at: 700
	copy: 700, 100, 27
	Done copying.

	bye!

*/